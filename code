#!/usr/bin/env python

import sys

models = []
temp = False
T = ""
filename = ""
opdracht = ""

class Model:
    def __init__(self, number):
        self.number = number
        self.chains = []

class Chain:
    def __init__(self, letter):
        self.letter = letter
        self.res = []

class Residue:
    def __init__(self, number):
#        self.res_type = res_type
        self.number = int(number)
        self.atoms = []
        self.CA = Atom(0, 0)
        
class Atom:
    def __init__(self, number, name=None, x=0, y=0, z=0, b_factor=0):
        self.number = int(number)
        self.name = name
        self.x = float(x)
        self.y = float(y)
        self.z = float(z)
        self.b_factor = float(b_factor)
    
def main():
    global filename
    global opdracht
    print("What PDB-file do you want to be read?")
    filename = sys.stdin.readline()[:-1]
    print("Do you want to extract b-factors? y/n If you answer n, the RMSF of different molecules in the unit cell will be calculated.")
    if sys.stdin.readline() == "y":
        print("Do you want the average b-factor per residue (avg), the c-alpha b-factor per residue (ca) or the total average b-factor (tavg)?")
        opdracht = sys.stdin.readline()[:-1]
    else:
        opdracht = "RMSF"
#    temperature = sys.argv[3]
#    if temperature == "temp":
#        temp = True
    ReadFile()
    if opdracht == "ca":
        Return_CA_Bfactors()
    if opdracht == "avg":
        ReturnAvgBfactor()
    if opdracht == "tavg":
        ReturnTotalAvgB()
    if opdracht == "RMSF":
        SymRMSF()
        
# reading for RMSF now sees MODEL entries and chains as the same thing, while for MD-pdb's each model is a different time step and the chains are the different molecules
def ReadFile():
    global filename
    f = open(filename, 'r')
    l = f.readline()
    current_mdl = Model(0)
    while l[0:4] != "ATOM":
        if l[0:6] == "MODEL ":
            mdl_number = l[10:14]
            current_mdl = Model(int(mdl_number))
            models.append(current_mdl)
        l = f.readline()
    while l[0:3] != "TER":
        if l[0:6] == "ENDMDL":
            while l[0:6] != "MODEL ":
                l = f.readline()
            if l[0:3] != "TER":
                break
        while l[0:6] != "ENDMDL":
            if l[0:4] == "ATOM":
                res_number = l[22:26]
                current_residue = Residue(res_number)
                current_mdl.res.append(current_residue)
                while l[0:3] != "TER" and l[22:26] == res_number:
                    if l[0:4] == "ATOM":
                        if opdracht == "RMSF":
                            # change this to the right values for number, x, y and z
                        else:
                            current_atom = Atom(l[12:16], l[60:66])
                            if "CA" in current_atom.name:
                                current_residue.CA = current_atom # maybe this is also convenient for RMSF?
    #                    current_atom = Atom(l[6:11], l[12:16], l[21], l[30:38], l[38:46], l[46:54], l[54:60], l[60:66])
                        current_residue.atoms.append(current_atom)
                    l = f.readline()
            else:
                l = f.readline()
        l = f.readline()
    f.close()

def SymRMSF():

#  This method writes all B-factors from the C-alpha's to a file
def Return_CA_Bfactors():
    global filename
    bestand = open(filename[0:-4] +'_CA.txt', 'w')
    if temp:
        bestand.write("# Experimental conditions - Temperature : %s"%T)
    for r in residues:
        bestand.write(str(r.res_number) + " " + str(r.CA.b_factor) + "\n")
    bestand.close()

# This method first calculates, and then writes the average B-factor per residue to a file
def ReturnAvgBfactor():
    global filename
    bestand = open(filename[0:-4] + '_AvgB.txt', 'w')
    for r in residues:
        total = float(0)
        t = int(0)
        for a in r.atoms:
            total += a.b_factor
            t += 1
        AvgB = total/t
        bestand.write(str(r.res_number) + " " + str(AvgB) + "\n")
    bestand.close()
    
# This method calculates the total average B-factor and writes it to the terminal
def ReturnTotalAvgB():
    for r in residues:
        total = float(0)
        nres = 0
        for a in r.atoms:
            if "H" not in a.name and "O" not in a.name:
                total += a.b_factor
                nres += 1
    tavg = float(total/nres)
    print("The average b-factor (without considering hydrogens) is: %s" %tavg)
    
def WriteRDF():
    f = open("RDF_pdb.rdf", 'w')
    for m in models:
        f.write(":Model%f\n" %m.number)
        for c in m.chains:
            f.write("\t:Chain%s %f_%s" (%c.letter, %m.number, %c.letter))
    for m in models:
        for c in m.chains:
            f.write(":%f_%s" (%m.number, %c.letter))
            for r in c.residues:
                f.write("\t:res%f %f_%s_%f" (%r.number, %m.number, %c.letter, %r.number))

if __name__ == "__main__":
    main()
